// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace APIRestProyecto.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Categoria", b =>
                {
                    b.Property<Guid>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdCategoria");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            IdCategoria = new Guid("4f9a7cdb-c6dd-4c1c-8ca2-88f34c913c54"),
                            Nombre = "Portatiles"
                        },
                        new
                        {
                            IdCategoria = new Guid("b130f449-a5f3-4e3e-a165-d73c3b73a241"),
                            Nombre = "Auriculares"
                        },
                        new
                        {
                            IdCategoria = new Guid("5af38236-256e-4ded-a81e-8010f08c51b6"),
                            Nombre = "Implementos"
                        });
                });

            modelBuilder.Entity("Entities.Models.Cliente", b =>
                {
                    b.Property<Guid>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClienteId");

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Contacto")
                        .HasColumnType("bigint");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numerodocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipodocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Entities.Models.DetalleFacturaCliente", b =>
                {
                    b.Property<Guid>("DetalleFacturaVentaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DetalleFacturaVentaID");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("FacturaVentaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FacturasVentaFacturaVentaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("IVA")
                        .HasColumnType("real");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ValorDescuento")
                        .HasColumnType("real");

                    b.Property<float>("ValorUnitario")
                        .HasColumnType("real");

                    b.HasKey("DetalleFacturaVentaID");

                    b.HasIndex("FacturasVentaFacturaVentaId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetallesFacturaVentas");
                });

            modelBuilder.Entity("Entities.Models.DetalleFacturaProveedor", b =>
                {
                    b.Property<Guid>("DetalleFacturaCompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DetalleacturaCompraId");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("FacturaCompraId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("IVA")
                        .HasColumnType("real");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ValorDescuento")
                        .HasColumnType("real");

                    b.Property<float>("ValorUnitario")
                        .HasColumnType("real");

                    b.HasKey("DetalleFacturaCompraId");

                    b.HasIndex("FacturaCompraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetallesFacturaProveedores");
                });

            modelBuilder.Entity("Entities.Models.FacturaCliente", b =>
                {
                    b.Property<Guid>("FacturaVentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FacturaVentaId");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Fecha")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("FacturaVentaId");

                    b.HasIndex("ClienteId");

                    b.ToTable("FacturasVentas");
                });

            modelBuilder.Entity("Entities.Models.FacturaProveedor", b =>
                {
                    b.Property<Guid>("FacturaCompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FacturaCompraId");

                    b.Property<DateTime?>("Fecha")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdProveedor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProveedoresIdProveedor")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FacturaCompraId");

                    b.HasIndex("ProveedoresIdProveedor");

                    b.ToTable("FacturasCompras");

                    b.HasData(
                        new
                        {
                            FacturaCompraId = new Guid("90abbca8-664d-4b20-b5de-024705497d4a"),
                            Fecha = new DateTime(2023, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            FacturaCompraId = new Guid("75dba8c0-d178-41e7-938c-ed49778fb52a"),
                            Fecha = new DateTime(2023, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            FacturaCompraId = new Guid("025ca3c1-0deb-4afd-ae94-2159a8479811"),
                            Fecha = new DateTime(2023, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Entities.Models.MetodoPago", b =>
                {
                    b.Property<Guid>("IdMetodoPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdMetodoPago");

                    b.Property<Guid>("FacturaVentaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaTransaccion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombrePlataforma")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("IdMetodoPago");

                    b.HasIndex("FacturaVentaId");

                    b.ToTable("MetodoPagos");
                });

            modelBuilder.Entity("Entities.Models.Precios", b =>
                {
                    b.Property<Guid>("IdHistoricoPrecios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdHistoricoPrecios");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaDescuento")
                        .HasColumnType("datetime2");

                    b.Property<float>("PrecioCompra")
                        .HasMaxLength(60)
                        .HasColumnType("real");

                    b.Property<float>("PrecioDescuento")
                        .HasColumnType("real");

                    b.Property<float>("PrecioVenta")
                        .HasMaxLength(60)
                        .HasColumnType("real");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdHistoricoPrecios");

                    b.HasIndex("ProductoId");

                    b.ToTable("HistoricosPrecios");

                    b.HasData(
                        new
                        {
                            IdHistoricoPrecios = new Guid("369ccaf1-e340-4ee9-b612-acc195dc856a"),
                            Estado = "Inactivo",
                            FechaDescuento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(24),
                            PrecioCompra = 342f,
                            PrecioDescuento = 234f,
                            PrecioVenta = 342f,
                            ProductoId = new Guid("6bd9dded-9a5f-412c-9575-2110dbd9b7c6")
                        },
                        new
                        {
                            IdHistoricoPrecios = new Guid("c20a3432-81eb-48c2-a25e-6574cd445cbb"),
                            Estado = "Inactivo",
                            FechaDescuento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(24),
                            PrecioCompra = 34f,
                            PrecioDescuento = 45f,
                            PrecioVenta = 45f,
                            ProductoId = new Guid("03a78db6-0e2e-4d18-9001-fbccb5cc2dca")
                        },
                        new
                        {
                            IdHistoricoPrecios = new Guid("8285b178-56af-4939-aada-e35f6e067db5"),
                            Estado = "Inactivo",
                            FechaDescuento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(24),
                            PrecioCompra = 678f,
                            PrecioDescuento = 456f,
                            PrecioVenta = 456f,
                            ProductoId = new Guid("3bbe0bbe-0379-4d32-9fd9-d74a51d319a6")
                        });
                });

            modelBuilder.Entity("Entities.Models.Producto", b =>
                {
                    b.Property<Guid>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductoId");

                    b.Property<int>("Cantidad")
                        .HasMaxLength(60)
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdCategoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Lugar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<float>("Precio")
                        .HasColumnType("real");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductoId");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("StockId");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            ProductoId = new Guid("6bd9dded-9a5f-412c-9575-2110dbd9b7c6"),
                            Cantidad = 1,
                            Estado = "Activo",
                            IdCategoria = new Guid("4f9a7cdb-c6dd-4c1c-8ca2-88f34c913c54"),
                            Lugar = "Estante 2",
                            Nombre = "Computador Samsung 2018",
                            Precio = 2600000f,
                            StockId = new Guid("e9208668-35d6-4862-b4f6-2b3fe8f6a525")
                        },
                        new
                        {
                            ProductoId = new Guid("03a78db6-0e2e-4d18-9001-fbccb5cc2dca"),
                            Cantidad = 1,
                            Estado = "Activo",
                            IdCategoria = new Guid("b130f449-a5f3-4e3e-a165-d73c3b73a241"),
                            Lugar = "Estante 1",
                            Nombre = "Audifonos inalambricos",
                            Precio = 250000f,
                            StockId = new Guid("f46678ca-5e2e-4b36-8d56-5eb110770bbe")
                        },
                        new
                        {
                            ProductoId = new Guid("3bbe0bbe-0379-4d32-9fd9-d74a51d319a6"),
                            Cantidad = 1,
                            Estado = "Activo",
                            IdCategoria = new Guid("5af38236-256e-4ded-a81e-8010f08c51b6"),
                            Lugar = "Estante 3",
                            Nombre = "Mouse inalambrico",
                            Precio = 50000f,
                            StockId = new Guid("9fffc55a-186f-4d62-88b4-78b43b2948c1")
                        });
                });

            modelBuilder.Entity("Entities.Models.Proveedor", b =>
                {
                    b.Property<Guid>("IdProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdProveedor");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<long?>("Contacto")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("bigint");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("NitProveedor")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("IdProveedor");

                    b.ToTable("Proveedores");

                    b.HasData(
                        new
                        {
                            IdProveedor = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            Apellido = "Rodriguez",
                            Contacto = 31313131L,
                            Correo = "Rodriguez@gmail.com",
                            Direccion = "lisboa",
                            NitProveedor = "39487358934",
                            Nombre = "Angel Correa"
                        },
                        new
                        {
                            IdProveedor = new Guid("c9d4c051-49b6-410c-bc78-2d54a9991880"),
                            Apellido = "Lopez",
                            Contacto = 31313131L,
                            Correo = "lopez@gmail.com",
                            Direccion = "gaitana",
                            NitProveedor = "39487358944",
                            Nombre = "Maicol Cardona"
                        });
                });

            modelBuilder.Entity("Entities.Models.Stock", b =>
                {
                    b.Property<Guid>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StockId");

                    b.Property<int>("CantidadAlarma")
                        .HasColumnType("int");

                    b.Property<int>("CantidadIdeal")
                        .HasMaxLength(60)
                        .HasColumnType("int");

                    b.Property<int>("CantidadMinima")
                        .HasColumnType("int");

                    b.Property<int>("CantidadReal")
                        .HasMaxLength(60)
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.HasKey("StockId");

                    b.ToTable("Stock");

                    b.HasData(
                        new
                        {
                            StockId = new Guid("e9208668-35d6-4862-b4f6-2b3fe8f6a525"),
                            CantidadAlarma = 5,
                            CantidadIdeal = 50,
                            CantidadMinima = 2,
                            CantidadReal = 150,
                            FechaIngreso = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(24)
                        },
                        new
                        {
                            StockId = new Guid("f46678ca-5e2e-4b36-8d56-5eb110770bbe"),
                            CantidadAlarma = 5,
                            CantidadIdeal = 100,
                            CantidadMinima = 30,
                            CantidadReal = 250,
                            FechaIngreso = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(22)
                        },
                        new
                        {
                            StockId = new Guid("9fffc55a-186f-4d62-88b4-78b43b2948c1"),
                            CantidadAlarma = 5,
                            CantidadIdeal = 40,
                            CantidadMinima = 10,
                            CantidadReal = 80,
                            FechaIngreso = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(21)
                        });
                });

            modelBuilder.Entity("Entities.Models.Usuario", b =>
                {
                    b.Property<Guid>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdUsuario");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<long>("Contacto")
                        .HasColumnType("bigint");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<long>("NumeroDocumento")
                        .HasMaxLength(60)
                        .HasColumnType("bigint");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            IdUsuario = new Guid("e2bf9020-f6ee-4a9b-a99a-bd3055c5667a"),
                            Apellido = "Sanitas",
                            Contacto = 3114567891L,
                            Contraseña = "Soltero123",
                            Correo = "Maicol@gmail.com",
                            Direccion = "Sur",
                            Nombre = "Maicol Ortiz",
                            NumeroDocumento = 34567890121L,
                            Pais = "Colombia"
                        },
                        new
                        {
                            IdUsuario = new Guid("ddd67d84-a805-489b-a586-eae523327b8f"),
                            Apellido = "sampeer",
                            Contacto = 311453339L,
                            Contraseña = "andrisan123",
                            Correo = "samper@gmail.com",
                            Direccion = "Sur",
                            Nombre = "Santiago Cardona",
                            NumeroDocumento = 3456789033L,
                            Pais = "Colombia"
                        });
                });

            modelBuilder.Entity("Entities.Models.Cliente", b =>
                {
                    b.HasOne("Entities.Models.Usuario", "Usuario")
                        .WithMany("Clientes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Entities.Models.DetalleFacturaCliente", b =>
                {
                    b.HasOne("Entities.Models.FacturaCliente", "FacturasVenta")
                        .WithMany()
                        .HasForeignKey("FacturasVentaFacturaVentaId");

                    b.HasOne("Entities.Models.Producto", "Producto")
                        .WithMany("DetalleFacturaCliente")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacturasVenta");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Entities.Models.DetalleFacturaProveedor", b =>
                {
                    b.HasOne("Entities.Models.FacturaProveedor", "FacturaCompra")
                        .WithMany()
                        .HasForeignKey("FacturaCompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacturaCompra");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Entities.Models.FacturaCliente", b =>
                {
                    b.HasOne("Entities.Models.Cliente", "Clientes")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("Entities.Models.FacturaProveedor", b =>
                {
                    b.HasOne("Entities.Models.Proveedor", "Proveedores")
                        .WithMany("FacturaProvedor")
                        .HasForeignKey("ProveedoresIdProveedor");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Entities.Models.MetodoPago", b =>
                {
                    b.HasOne("Entities.Models.FacturaCliente", "FacturaVenta")
                        .WithMany("MetodosPago")
                        .HasForeignKey("FacturaVentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacturaVenta");
                });

            modelBuilder.Entity("Entities.Models.Precios", b =>
                {
                    b.HasOne("Entities.Models.Producto", "Producto")
                        .WithMany("HistoricoPrecios")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Entities.Models.Producto", b =>
                {
                    b.HasOne("Entities.Models.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Stock", "Stock")
                        .WithMany("Productos")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Entities.Models.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Entities.Models.FacturaCliente", b =>
                {
                    b.Navigation("MetodosPago");
                });

            modelBuilder.Entity("Entities.Models.Producto", b =>
                {
                    b.Navigation("DetalleFacturaCliente");

                    b.Navigation("HistoricoPrecios");
                });

            modelBuilder.Entity("Entities.Models.Proveedor", b =>
                {
                    b.Navigation("FacturaProvedor");
                });

            modelBuilder.Entity("Entities.Models.Stock", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Entities.Models.Usuario", b =>
                {
                    b.Navigation("Clientes");
                });
#pragma warning restore 612, 618
        }
    }
}
